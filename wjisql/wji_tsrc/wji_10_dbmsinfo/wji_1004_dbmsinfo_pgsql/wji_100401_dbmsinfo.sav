-------------------------- TC 10/4.2.1/1 ----------------------
Tests menu item DBMS Info.
Number of html table columns: 3
Number of html table rows: 4
Information type,	Value,	DatabaseMetaData method()
Database Product Name:,	PostgreSQL,	getDatabaseProductName()
Database Product Version:,	10.10 (Ubuntu 10.10-0ubuntu0.18.04.1),	getDatabaseProductVersion()
JDBC Driver Name:,	PostgreSQL Native Driver,	getDriverName()
JDBC Driver Version:,	PostgreSQL 9.4.1212.jre7,	getDriverVersion()
Number of html table columns: 4
Number of html table rows: 124
SNO,	Information type,	Value,	DatabaseMetaData method()
1,	Are all procedures callable?:,	true,	allProceduresAreCallable()
2,	Are all tables selectable?:,	true,	allTablesAreSelectable()
3,	Current URL used:,	jdbc:postgresql://localhost/pgsqldb,	getURL()
4,	Current User:,	pgsqlusr,	getUserName()
5,	Is current database READ ONLY?:,	false,	isReadOnly()
6,	Are NULLs sorted HIGH?:,	true,	nullsAreSortedHigh()
7,	Are NULLs sorted LOW?:,	false,	nullsAreSortedLow()
8,	Are NULLs sorted at START?:,	false,	nullsAreSortedAtStart()
9,	Are NULLs sorted at END?:,	false,	nullsAreSortedAtEnd()
10,	Driver major version:,	9,	getDriverMajorVersion()
11,	Driver minor version:,	4,	getDriverMinorVersion()
12,	Does database stores tables in a local file?:,	false,	usesLocalFiles()
13,	Does database uses a file for each table?:,	false,	usesLocalFiles()
14,	Treats mixed case unquoted SQL identifiers as case SENSITIVE and as a result stores them in MIXED case?:,	false,	supportsMixedCaseIdentifiers()
15,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in UPPER case?:,	false,	storesUpperCaseIdentifiers()
16,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in LOWER case?:,	true,	storesLowerCaseIdentifiers()
17,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in MIXED case?:,	false,	storesMixedCaseIdentifiers()
18,	Treats mixed case QUOTED SQL identifiers as case SENSITIVE and as a result stores them in MIXED case?:,	true,	supportsMixedCaseQuotedIdentifiers()
19,	Treats mixed case QUOTED SQL identifiers as case INSENSITIVE and stores them in UPPER case?:,	false,	storesUpperCaseQuotedIdentifiers()
20,	Treats mixed case QUOTED SQL identifiers as case INSENSITIVE and stores them in LOWER case?:,	false,	storesLowerCaseQuotedIdentifiers()
21,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in MIXED case?:,	false,	storesMixedCaseIdentifiers()
22,	String used to quoted SQL identifiers:,	",	getIdentifierQuoteString()
23,	List of database keywords Other than those in SQL92 standard:,	abort, acl, add, aggregate, append, archive, arch_store, backward, binary, boolean, change, cluster, copy, database, delimiter, delimiters, do, extend, explain, forward, heavy, index, inherits, isnull, light, listen, load, merge, nothing, notify, notnull, oids, purge, rename, replace, retrieve, returns, rule, recipe, setof, stdin, stdout, store, vacuum, verbose, version,	getSQLKeywords()
24,	List of supported math functions:,	abs, acos, asin, atan, atan2, ceiling, cos, cot, degrees, exp, floor, log, log10, mod, pi, power, radians, round, sign, sin, sqrt, tan, truncate,	getNumericFunctions()
25,	List of supported string functions:,	ascii, char, concat, lcase, left, length, ltrim, repeat, rtrim, space, substring, ucase, replace,	getStringFunctions()
26,	List of supported system functions:,	database, ifnull, user,	getSystemFunctions()
27,	List of supported time and date functions:,	curdate, curtime, dayname, dayofmonth, dayofweek, dayofyear, hour, minute, month, monthname, now, quarter, second, week, year, timestampadd,	getTimeDateFunctions()
28,	String that can be used to escape wildcard characters:,	\,	getSearchStringEscape()
29,	Extra characters that can be used in unquoted identifier names (those beyond a-z, A-Z, 0-9 and _):,	,	getExtraNameCharacters()
30,	Supports ALTER TABLE with ADD column?:,	true,	supportsAlterTableWithAddColumn()
31,	Supports ALTER TABLE with DROP column?:,	true,	supportsAlterTableWithDropColumn()
32,	Supports column aliasing?:,	true,	supportsColumnAliasing()
33,	Supports concatenation between NULL and non-NULL to NULL?:,	true,	nullPlusNonNullIsNull()
34,	Supports the CONVERT function?:,	false,	supportsConvert()
35,	Supports table correlation names?:,	true,	supportsTableCorrelationNames()
36,	Should the table correlation names be different from the names of the tables?:,	false,	supportsDifferentTableCorrelationNames()
37,	Supports expressions in ORDER BY?:,	true,	supportsExpressionsInOrderBy()
38,	Supports using a column that is not in the SELECT statement in an ORDER BY clause?:,	true,	supportsOrderByUnrelated()
39,	Supports expressions in GROUP BY?:,	true,	supportsGroupBy()
40,	Supports using a column that is not in the SELECT statement in a GROUP BY clause?:,	true,	supportsGroupByUnrelated()
41,	Supports using columns not included the SELECT statement in a GROUP BY clause provided that all of the columns in the SELECT statement are included in the GROUP BY clause?:,	true,	supportsGroupByBeyondSelect()
42,	Supports LIKE escape clause?:,	true,	supportsLikeEscapeClause()
43,	Supports getting multiple ResultSet objects from a single call to the method execute?:,	true,	supportsLikeEscapeClause()
44,	Supports multiple transactions open at once (on different connections)?:,	true,	supportsMultipleTransactions()
45,	Supports non-nullable columns?:,	true,	supportsNonNullableColumns()
46,	Supports the ODBC Minimum SQL grammar?:,	true,	supportsMinimumSQLGrammar()
47,	Supports the ODBC Core SQL grammar?:,	false,	supportsCoreSQLGrammar()
48,	Supports the ODBC Extended SQL grammar?:,	false,	supportsExtendedSQLGrammar()
49,	Supports the ANSI92 entry level SQL grammar?:,	true,	supportsANSI92EntryLevelSQL()
50,	Supports the ANSI92 intermediate SQL grammar?:,	false,	supportsANSI92IntermediateSQL()
51,	Supports the ANSI92 full SQL grammar?:,	false,	supportsANSI92FullSQL()
52,	Supports the SQL Integrity Enhancement Facility?:,	true,	supportsIntegrityEnhancementFacility()
53,	Supports some form of outer join?:,	true,	supportsOuterJoins()
54,	Supports nested full outer joins?:,	true,	supportsFullOuterJoins()
55,	Supports limited outer joins?:,	true,	supportsLimitedOuterJoins()
56,	Vendor's preferred term for "schema":,	schema,	getSchemaTerm()
57,	Vendor's preferred term for "procedure":,	function,	getProcedureTerm()
58,	Vendor's preferred term for "catalog":,	database,	getCatalogTerm()
59,	Does catalog appears at the start of a fully qualified table name?:,	true,	isCatalogAtStart()
60,	Catalog separator:,	.,	getCatalogSeparator()
61,	Supports schema name in data manipulation statements?:,	true,	supportsSchemasInDataManipulation()
62,	Supports schema name in procedure call statements?:,	true,	supportsSchemasInProcedureCalls()
63,	Supports schema name in table definition statements?:,	true,	supportsSchemasInTableDefinitions()
64,	Supports schema name in index definition statements?:,	true,	supportsSchemasInIndexDefinitions()
65,	Supports schema name in privilege definition statements?:,	true,	supportsSchemasInPrivilegeDefinitions()
66,	Supports catalog name in data manipulation statements?:,	false,	supportsCatalogsInDataManipulation()
67,	Supports catalog name in procedure call statements?:,	false,	supportsCatalogsInProcedureCalls()
68,	Supports catalog name in table definition statements?:,	false,	supportsCatalogsInTableDefinitions()
69,	Supports catalog name in index definition statements?:,	false,	supportsCatalogsInIndexDefinitions()
70,	Supports catalog name in privilege definition statements?:,	false,	supportsCatalogsInPrivilegeDefinitions()
71,	Supports positioned DELETE statements?:,	false,	supportsPositionedDelete()
72,	Supports positioned UPDATE statements?:,	false,	supportsPositionedUpdate()
73,	Supports SELECT FOR UPDATE statements?:,	true,	supportsSelectForUpdate()
74,	Supports stored procedures?:,	true,	supportsStoredProcedures()
75,	Supports subqueries in comparison expressions?:,	true,	supportsSubqueriesInComparisons()
76,	Supports subqueries in EXISTS expressions?:,	true,	supportsSubqueriesInExists()
77,	Supports subqueries in IN expressions?:,	true,	supportsSubqueriesInIns()
78,	Supports subqueries in quantified expressions?:,	true,	supportsSubqueriesInQuantifieds()
79,	Supports subqueries in correlated subqueries?:,	true,	supportsCorrelatedSubqueries()
80,	Supports SQL UNION?:,	true,	supportsUnion()
81,	Supports SQL UNION ALL?:,	true,	supportsUnionAll()
82,	Supports keeping cursors open across commits?:,	false,	supportsOpenCursorsAcrossCommit()
83,	Supports keeping cursors open across rollbacks?:,	false,	supportsOpenCursorsAcrossRollback()
84,	Supports keeping statements open across commits?:,	true,	supportsOpenStatementsAcrossCommit()
85,	Supports keeping statements open across rollbacks?:,	true,	supportsOpenStatementsAcrossRollback()
86,	The maximum number of hex characters allowed in an inline binary literal:,	0 (No limit or limit unknown),	getMaxBinaryLiteralLength()
87,	The maximum number of characters allowed for a character literal:,	0 (No limit or limit unknown),	getMaxCharLiteralLength()
88,	The maximum number of characters allowed for a column name:,	63,	getMaxColumnNameLength()
89,	The maximum number of columns allowed in GROUP BY clause:,	0 (No limit or limit unknown),	getMaxColumnsInGroupBy()
90,	The maximum number of columns allowed in an index:,	32,	getMaxColumnsInIndex()
91,	The maximum number of columns allowed in an ORDER BY clause:,	0 (No limit or limit unknown),	getMaxColumnsInOrderBy()
92,	The maximum number of columns allowed in a SELECT list:,	0 (No limit or limit unknown),	getMaxColumnsInSelect()
93,	The maximum number of columns allowed in a table:,	1600,	getMaxColumnsInTable()
94,	The maximum number of concurrant connections possible:,	8192,	getMaxConnections()
95,	The maximum cursor name length:,	63,	getMaxCursorNameLength()
96,	The maximum number of bytes allowed in an index:,	0 (No limit or limit unknown),	getMaxIndexLength()
97,	The maximum number of characters allowed in a schema name:,	63,	getMaxSchemaNameLength()
98,	The maximum number of characters allowed in a procedure name:,	63,	getMaxProcedureNameLength()
99,	The maximum number of characters allowed in a catalog name:,	63,	getMaxCatalogNameLength()
100,	The maximum number of bytes allowed in a row:,	1073741824,	getMaxRowSize()
101,	Do maximum number of bytes allowed in a row include SQL data types LONGVARCHAR and LONGVARBINARY:,	false,	doesMaxRowSizeIncludeBlobs()
102,	The maximum number of characters allowed in an SQL statement:,	0 (No limit or limit unknown),	getMaxStatementLength()
103,	The maximum number of concurrent active open statements:,	0 (No limit or limit unknown),	getMaxStatements()
104,	The maximum number of characters allowed in a table name:,	63,	getMaxTableNameLength()
105,	The maximum number of tables allowed in a SELECT statement:,	0 (No limit or limit unknown),	getMaxTablesInSelect()
106,	The maximum number of characters allowed in a user name:,	63,	getMaxUserNameLength()
107,	Default transaction isolation level:,	2 (READ_COMMITTED),	getDefaultTransactionIsolation()
108,	Supports transactions?:,	true,	supportsTransactions()
109,	Supports both data definition and data manipulation statements within a transaction?:,	true,	supportsDataDefinitionAndDataManipulationTransactions()
110,	Supports only data manipulation statements within a transaction?:,	false,	supportsDataManipulationTransactionsOnly()
111,	Does a data definition statement within a transaction forces the transaction to commit?:,	false,	dataDefinitionCausesTransactionCommit()
112,	Does a data definition statement ignored within a transaction?:,	false,	dataDefinitionIgnoredInTransactions()
113,	Supports save points?:,	true,	supportsSavepoints()
114,	Supports named parameters?:,	false,	supportsNamedParameters()
115,	Supports multiple ResultSet objects returned from a CallableStatement object simultaneously?:,	false,	supportsMultipleOpenResults()
116,	Can auto-generated keys be retrieved after a statement has been executed?:,	true,	supportsGetGeneratedKeys()
117,	The default holdability of this ResultSet object:,	1,	getResultSetHoldability()
118,	Database major version,	10,	getDatabaseMajorVersion()
119,	Database minor version,	10,	getDatabaseMinorVersion()
120,	JDBC major version,	4,	getJDBCMajorVersion()
121,	JDBC minor version,	0,	getJDBCMinorVersion()
122,	SQLSTATE returned by SQLException.getSQLState is X/Open (now known as Open Group) SQL CLI or SQL99:,	2 (sqlStateSQL99),	getSQLStateType()
123,	Do updates made to a LOB are made on a copy or directly to the LOB?:,	true,	locatorsUpdateCopy()
124,	Supports statement pooling?:,	false,	supportsStatementPooling()
