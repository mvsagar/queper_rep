-------------------------- TC 10/3.2.1/1 ----------------------
Tests menu item DBMS Info.
Number of html table columns: 3
Number of html table rows: 4
Information type,	Value,	DatabaseMetaData method()
Database Product Name:,	MySQL,	getDatabaseProductName()
Database Product Version:,	10.4.7-MariaDB-1:10.4.7+maria~bionic,	getDatabaseProductVersion()
JDBC Driver Name:,	MariaDB connector/J,	getDriverName()
JDBC Driver Version:,	2.2.1,	getDriverVersion()
Number of html table columns: 4
Number of html table rows: 124
SNO,	Information type,	Value,	DatabaseMetaData method()
1,	Are all procedures callable?:,	true,	allProceduresAreCallable()
2,	Are all tables selectable?:,	true,	allTablesAreSelectable()
3,	Current URL used:,	jdbc:mariadb://address=(host=localhost)(port=3306)(type=master)/mariadb?user=mariausr&password=maria123,	getURL()
4,	Current User:,	mariausr,	getUserName()
5,	Is current database READ ONLY?:,	false,	isReadOnly()
6,	Are NULLs sorted HIGH?:,	false,	nullsAreSortedHigh()
7,	Are NULLs sorted LOW?:,	true,	nullsAreSortedLow()
8,	Are NULLs sorted at START?:,	false,	nullsAreSortedAtStart()
9,	Are NULLs sorted at END?:,	true,	nullsAreSortedAtEnd()
10,	Driver major version:,	2,	getDriverMajorVersion()
11,	Driver minor version:,	2,	getDriverMinorVersion()
12,	Does database stores tables in a local file?:,	false,	usesLocalFiles()
13,	Does database uses a file for each table?:,	false,	usesLocalFiles()
14,	Treats mixed case unquoted SQL identifiers as case SENSITIVE and as a result stores them in MIXED case?:,	true,	supportsMixedCaseIdentifiers()
15,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in UPPER case?:,	false,	storesUpperCaseIdentifiers()
16,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in LOWER case?:,	false,	storesLowerCaseIdentifiers()
17,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in MIXED case?:,	false,	storesMixedCaseIdentifiers()
18,	Treats mixed case QUOTED SQL identifiers as case SENSITIVE and as a result stores them in MIXED case?:,	true,	supportsMixedCaseQuotedIdentifiers()
19,	Treats mixed case QUOTED SQL identifiers as case INSENSITIVE and stores them in UPPER case?:,	false,	storesUpperCaseQuotedIdentifiers()
20,	Treats mixed case QUOTED SQL identifiers as case INSENSITIVE and stores them in LOWER case?:,	false,	storesLowerCaseQuotedIdentifiers()
21,	Treats mixed case unquoted SQL identifiers as case INSENSITIVE and stores them in MIXED case?:,	false,	storesMixedCaseIdentifiers()
22,	String used to quoted SQL identifiers:,	`,	getIdentifierQuoteString()
23,	List of database keywords Other than those in SQL92 standard:,	ACCESSIBLE, ANALYZE, ASENSITIVE, BEFORE, BIGINT, BINARY, BLOB, CALL, CHANGE, CONDITION, DATABASE, DATABASES, DAY_HOUR, DAY_MICROSECOND, DAY_MINUTE, DAY_SECOND, DELAYED, DETERMINISTIC, DISTINCTROW, DIV, DUAL, EACH, ELSEIF, ENCLOSED, ESCAPED, EXIT, EXPLAIN, FLOAT4, FLOAT8, FORCE, FULLTEXT, HIGH_PRIORITY, HOUR_MICROSECOND, HOUR_MINUTE, HOUR_SECOND, IF, IGNORE, INFILE, INOUT, INT1, INT2, INT3, INT4, INT8, ITERATE, KEY, KEYS, KILL, LEAVE, LIMIT, LINEAR, LINES, LOAD, LOCALTIME, LOCALTIMESTAMP, LOCK, LONG, LONGBLOB, LONGTEXT, LOOP, LOW_PRIORITY, MEDIUMBLOB, MEDIUMINT, MEDIUMTEXT, MIDDLEINT, MINUTE_MICROSECOND, MINUTE_SECOND, MOD, MODIFIES, NO_WRITE_TO_BINLOG, OPTIMIZE, OPTIONALLY, OUT, OUTFILE, PURGE, RANGE, READS, READ_ONLY, READ_WRITE, REGEXP, RELEASE, RENAME, REPEAT, REPLACE, REQUIRE, RETURN, RLIKE, SCHEMAS, SECOND_MICROSECOND, SENSITIVE, SEPARATOR, SHOW, SPATIAL, SPECIFIC, SQLEXCEPTION, SQL_BIG_RESULT, SQL_CALC_FOUND_ROWS, SQL_SMALL_RESULT, SSL, STARTING, STRAIGHT_JOIN, TERMINATED, TINYBLOB, TINYINT, TINYTEXT, TRIGGER, UNDO, UNLOCK, UNSIGNED, USE, UTC_DATE, UTC_TIME, UTC_TIMESTAMP, VARBINARY, VARCHARACTER, WHILE, X509, XOR, YEAR_MONTH, ZEROFILL, GENERAL, IGNORE_SERVER_IDS, MASTER_HEARTBEAT_PERIOD, MAXVALUE, RESIGNAL, SIGNALSLOW,	getSQLKeywords()
24,	List of supported math functions:,	DIV, ABS, ACOS, ASIN, ATAN, ATAN2, CEIL, CEILING, CONV, COS, COT, CRC32, DEGREES, EXP, FLOOR, GREATEST, LEAST, LN, LOG, LOG10, LOG2, MOD, OCT, PI, POW, POWER, RADIANS, RAND, ROUND, SIGN, SIN, SQRT, TAN, TRUNCATE,	getNumericFunctions()
25,	List of supported string functions:,	ASCII, BIN, BIT_LENGTH, CAST, CHARACTER_LENGTH, CHAR_LENGTH, CONCAT, CONCAT_WS, CONVERT, ELT, EXPORT_SET, EXTRACTVALUE, FIELD, FIND_IN_SET, FORMAT, FROM_BASE64, HEX, INSTR, LCASE, LEFT, LENGTH, LIKE, LOAD_FILE, LOCATE, LOWER, LPAD, LTRIM, MAKE_SET, MATCH AGAINST, MID, NOT LIKE, NOT REGEXP, OCTET_LENGTH, ORD, POSITION, QUOTE, REPEAT, REPLACE, REVERSE, RIGHT, RPAD, RTRIM, SOUNDEX, SOUNDS LIKE, SPACE, STRCMP, SUBSTR, SUBSTRING, SUBSTRING_INDEX, TO_BASE64, TRIM, UCASE, UNHEX, UPDATEXML, UPPER, WEIGHT_STRING,	getStringFunctions()
26,	List of supported system functions:,	DATABASE, USER, SYSTEM_USER, SESSION_USER, LAST_INSERT_ID, VERSION,	getSystemFunctions()
27,	List of supported time and date functions:,	ADDDATE, ADDTIME, CONVERT_TZ, CURDATE, CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP, CURTIME, DATEDIFF, DATE_ADD, DATE_FORMAT, DATE_SUB, DAY, DAYNAME, DAYOFMONTH, DAYOFWEEK, DAYOFYEAR, EXTRACT, FROM_DAYS, FROM_UNIXTIME, GET_FORMAT, HOUR, LAST_DAY, LOCALTIME, LOCALTIMESTAMP, MAKEDATE, MAKETIME, MICROSECOND, MINUTE, MONTH, MONTHNAME, NOW, PERIOD_ADD, PERIOD_DIFF, QUARTER, SECOND, SEC_TO_TIME, STR_TO_DATE, SUBDATE, SUBTIME, SYSDATE, TIMEDIFF, TIMESTAMPADD, TIMESTAMPDIFF, TIME_FORMAT, TIME_TO_SEC, TO_DAYS, TO_SECONDS, UNIX_TIMESTAMP, UTC_DATE, UTC_TIME, UTC_TIMESTAMP, WEEK, WEEKDAY, WEEKOFYEAR, YEAR, YEARWEEK,	getTimeDateFunctions()
28,	String that can be used to escape wildcard characters:,	\,	getSearchStringEscape()
29,	Extra characters that can be used in unquoted identifier names (those beyond a-z, A-Z, 0-9 and _):,	#@,	getExtraNameCharacters()
30,	Supports ALTER TABLE with ADD column?:,	true,	supportsAlterTableWithAddColumn()
31,	Supports ALTER TABLE with DROP column?:,	true,	supportsAlterTableWithDropColumn()
32,	Supports column aliasing?:,	true,	supportsColumnAliasing()
33,	Supports concatenation between NULL and non-NULL to NULL?:,	true,	nullPlusNonNullIsNull()
34,	Supports the CONVERT function?:,	true,	supportsConvert()
35,	Supports table correlation names?:,	true,	supportsTableCorrelationNames()
36,	Should the table correlation names be different from the names of the tables?:,	true,	supportsDifferentTableCorrelationNames()
37,	Supports expressions in ORDER BY?:,	true,	supportsExpressionsInOrderBy()
38,	Supports using a column that is not in the SELECT statement in an ORDER BY clause?:,	false,	supportsOrderByUnrelated()
39,	Supports expressions in GROUP BY?:,	true,	supportsGroupBy()
40,	Supports using a column that is not in the SELECT statement in a GROUP BY clause?:,	true,	supportsGroupByUnrelated()
41,	Supports using columns not included the SELECT statement in a GROUP BY clause provided that all of the columns in the SELECT statement are included in the GROUP BY clause?:,	true,	supportsGroupByBeyondSelect()
42,	Supports LIKE escape clause?:,	true,	supportsLikeEscapeClause()
43,	Supports getting multiple ResultSet objects from a single call to the method execute?:,	true,	supportsLikeEscapeClause()
44,	Supports multiple transactions open at once (on different connections)?:,	true,	supportsMultipleTransactions()
45,	Supports non-nullable columns?:,	true,	supportsNonNullableColumns()
46,	Supports the ODBC Minimum SQL grammar?:,	true,	supportsMinimumSQLGrammar()
47,	Supports the ODBC Core SQL grammar?:,	true,	supportsCoreSQLGrammar()
48,	Supports the ODBC Extended SQL grammar?:,	false,	supportsExtendedSQLGrammar()
49,	Supports the ANSI92 entry level SQL grammar?:,	true,	supportsANSI92EntryLevelSQL()
50,	Supports the ANSI92 intermediate SQL grammar?:,	false,	supportsANSI92IntermediateSQL()
51,	Supports the ANSI92 full SQL grammar?:,	false,	supportsANSI92FullSQL()
52,	Supports the SQL Integrity Enhancement Facility?:,	false,	supportsIntegrityEnhancementFacility()
53,	Supports some form of outer join?:,	true,	supportsOuterJoins()
54,	Supports nested full outer joins?:,	false,	supportsFullOuterJoins()
55,	Supports limited outer joins?:,	true,	supportsLimitedOuterJoins()
56,	Vendor's preferred term for "schema":,	,	getSchemaTerm()
57,	Vendor's preferred term for "procedure":,	procedure,	getProcedureTerm()
58,	Vendor's preferred term for "catalog":,	database,	getCatalogTerm()
59,	Does catalog appears at the start of a fully qualified table name?:,	true,	isCatalogAtStart()
60,	Catalog separator:,	.,	getCatalogSeparator()
61,	Supports schema name in data manipulation statements?:,	false,	supportsSchemasInDataManipulation()
62,	Supports schema name in procedure call statements?:,	false,	supportsSchemasInProcedureCalls()
63,	Supports schema name in table definition statements?:,	false,	supportsSchemasInTableDefinitions()
64,	Supports schema name in index definition statements?:,	false,	supportsSchemasInIndexDefinitions()
65,	Supports schema name in privilege definition statements?:,	true,	supportsSchemasInPrivilegeDefinitions()
66,	Supports catalog name in data manipulation statements?:,	true,	supportsCatalogsInDataManipulation()
67,	Supports catalog name in procedure call statements?:,	true,	supportsCatalogsInProcedureCalls()
68,	Supports catalog name in table definition statements?:,	true,	supportsCatalogsInTableDefinitions()
69,	Supports catalog name in index definition statements?:,	true,	supportsCatalogsInIndexDefinitions()
70,	Supports catalog name in privilege definition statements?:,	true,	supportsCatalogsInPrivilegeDefinitions()
71,	Supports positioned DELETE statements?:,	false,	supportsPositionedDelete()
72,	Supports positioned UPDATE statements?:,	false,	supportsPositionedUpdate()
73,	Supports SELECT FOR UPDATE statements?:,	true,	supportsSelectForUpdate()
74,	Supports stored procedures?:,	true,	supportsStoredProcedures()
75,	Supports subqueries in comparison expressions?:,	true,	supportsSubqueriesInComparisons()
76,	Supports subqueries in EXISTS expressions?:,	true,	supportsSubqueriesInExists()
77,	Supports subqueries in IN expressions?:,	true,	supportsSubqueriesInIns()
78,	Supports subqueries in quantified expressions?:,	true,	supportsSubqueriesInQuantifieds()
79,	Supports subqueries in correlated subqueries?:,	true,	supportsCorrelatedSubqueries()
80,	Supports SQL UNION?:,	true,	supportsUnion()
81,	Supports SQL UNION ALL?:,	true,	supportsUnionAll()
82,	Supports keeping cursors open across commits?:,	true,	supportsOpenCursorsAcrossCommit()
83,	Supports keeping cursors open across rollbacks?:,	true,	supportsOpenCursorsAcrossRollback()
84,	Supports keeping statements open across commits?:,	true,	supportsOpenStatementsAcrossCommit()
85,	Supports keeping statements open across rollbacks?:,	true,	supportsOpenStatementsAcrossRollback()
86,	The maximum number of hex characters allowed in an inline binary literal:,	16777208,	getMaxBinaryLiteralLength()
87,	The maximum number of characters allowed for a character literal:,	16777208,	getMaxCharLiteralLength()
88,	The maximum number of characters allowed for a column name:,	64,	getMaxColumnNameLength()
89,	The maximum number of columns allowed in GROUP BY clause:,	64,	getMaxColumnsInGroupBy()
90,	The maximum number of columns allowed in an index:,	16,	getMaxColumnsInIndex()
91,	The maximum number of columns allowed in an ORDER BY clause:,	64,	getMaxColumnsInOrderBy()
92,	The maximum number of columns allowed in a SELECT list:,	256,	getMaxColumnsInSelect()
93,	The maximum number of columns allowed in a table:,	0 (No limit or limit unknown),	getMaxColumnsInTable()
94,	The maximum number of concurrant connections possible:,	0 (No limit or limit unknown),	getMaxConnections()
95,	The maximum cursor name length:,	0 (No limit or limit unknown),	getMaxCursorNameLength()
96,	The maximum number of bytes allowed in an index:,	256,	getMaxIndexLength()
97,	The maximum number of characters allowed in a schema name:,	32,	getMaxSchemaNameLength()
98,	The maximum number of characters allowed in a procedure name:,	256,	getMaxProcedureNameLength()
99,	The maximum number of characters allowed in a catalog name:,	0 (No limit or limit unknown),	getMaxCatalogNameLength()
100,	The maximum number of bytes allowed in a row:,	0 (No limit or limit unknown),	getMaxRowSize()
101,	Do maximum number of bytes allowed in a row include SQL data types LONGVARCHAR and LONGVARBINARY:,	false,	doesMaxRowSizeIncludeBlobs()
102,	The maximum number of characters allowed in an SQL statement:,	0 (No limit or limit unknown),	getMaxStatementLength()
103,	The maximum number of concurrent active open statements:,	0 (No limit or limit unknown),	getMaxStatements()
104,	The maximum number of characters allowed in a table name:,	64,	getMaxTableNameLength()
105,	The maximum number of tables allowed in a SELECT statement:,	256,	getMaxTablesInSelect()
106,	The maximum number of characters allowed in a user name:,	16,	getMaxUserNameLength()
107,	Default transaction isolation level:,	4 (REPEATABLE_READ),	getDefaultTransactionIsolation()
108,	Supports transactions?:,	true,	supportsTransactions()
109,	Supports both data definition and data manipulation statements within a transaction?:,	true,	supportsDataDefinitionAndDataManipulationTransactions()
110,	Supports only data manipulation statements within a transaction?:,	false,	supportsDataManipulationTransactionsOnly()
111,	Does a data definition statement within a transaction forces the transaction to commit?:,	true,	dataDefinitionCausesTransactionCommit()
112,	Does a data definition statement ignored within a transaction?:,	false,	dataDefinitionIgnoredInTransactions()
113,	Supports save points?:,	true,	supportsSavepoints()
114,	Supports named parameters?:,	false,	supportsNamedParameters()
115,	Supports multiple ResultSet objects returned from a CallableStatement object simultaneously?:,	false,	supportsMultipleOpenResults()
116,	Can auto-generated keys be retrieved after a statement has been executed?:,	true,	supportsGetGeneratedKeys()
117,	The default holdability of this ResultSet object:,	1,	getResultSetHoldability()
118,	Database major version,	10,	getDatabaseMajorVersion()
119,	Database minor version,	4,	getDatabaseMinorVersion()
120,	JDBC major version,	4,	getJDBCMajorVersion()
121,	JDBC minor version,	2,	getJDBCMinorVersion()
122,	SQLSTATE returned by SQLException.getSQLState is X/Open (now known as Open Group) SQL CLI or SQL99:,	2 (sqlStateSQL99),	getSQLStateType()
123,	Do updates made to a LOB are made on a copy or directly to the LOB?:,	false,	locatorsUpdateCopy()
124,	Supports statement pooling?:,	false,	supportsStatementPooling()
